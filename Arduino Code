#include <Encoder.h>

// Create Encoder objects for two rotary encoders
Encoder encoder1(3, 2); // First encoder on pins 3 and 4
Encoder encoder2(6, 5); // Second encoder on pins 6 and 7

long lastPosition1 = 0;       // Last position of the first encoder
long lastPosition2 = 0;       // Last position of the second encoder
const int stepsPerRevolution = 4; // Set this to your encoder's steps per full rotation

unsigned long lastButtonCheckTime = 0; // Timer for button debounce
const int buttonDebounceInterval = 100; // Button debounce interval (ms)

void setup() {
  Serial.begin(9600); // Initialize Serial communication
}

void loop() {
  // Handle the first encoder
  long newPosition1 = encoder1.read(); // Get the current position of the first encoder
  if ((newPosition1 / stepsPerRevolution) > (lastPosition1 / stepsPerRevolution)) {
    // First encoder completed a clockwise rotation
    Serial.println("1");
  } else if ((newPosition1 / stepsPerRevolution) < (lastPosition1 / stepsPerRevolution)) {
    // First encoder completed an anticlockwise rotation
    Serial.println("-1");
  }
  lastPosition1 = newPosition1; // Update the last position of the first encoder

  // Handle the second encoder
  long newPosition2 = encoder2.read(); // Get the current position of the second encoder
  if ((newPosition2 / stepsPerRevolution) > (lastPosition2 / stepsPerRevolution)) {
    // Second encoder completed a clockwise rotation
    Serial.println("x 1");
  } else if ((newPosition2 / stepsPerRevolution) < (lastPosition2 / stepsPerRevolution)) {
    // Second encoder completed an anticlockwise rotation
    Serial.println("x -1");
  }
  lastPosition2 = newPosition2; // Update the last position of the second encoder

  // Handle buttons with debounce
  if (millis() - lastButtonCheckTime >= buttonDebounceInterval) {
    lastButtonCheckTime = millis(); // Update the last debounce check time

    // Handle button 1 on A0
    int button1Value = analogRead(A0); // Read the analog value from A0
    if (button1Value > 500) { // Threshold for pressed state
      Serial.println("x IGNITE 3");
    }

    // Handle button 2 on A1
    int button2Value = analogRead(A1); // Read the analog value from A1
    if (button2Value > 500) { // Threshold for pressed state
      Serial.println("x x DROP 1");
    }
  }
}
